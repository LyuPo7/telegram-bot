-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema BotCommandScopeChatAdministrators
module StripeAPI.Types.BotCommandScopeChatAdministrators where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.BotCommandScopeChatAdministrators@ in the specification.
-- 
-- Represents the [scope](https:\/\/core.telegram.org\/bots\/api\/\#botcommandscope) of bot commands, covering all administrators of a specific group or supergroup chat.
data BotCommandScopeChatAdministrators = BotCommandScopeChatAdministrators {
  -- | chat_id: Unique identifier for the target chat or username of the target supergroup (in the format \`\@supergroupusername\`)
  botCommandScopeChatAdministratorsChatId :: BotCommandScopeChatAdministratorsChatId'Variants
  -- | type: Scope type, must be *chat\\_administrators*
  , botCommandScopeChatAdministratorsType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON BotCommandScopeChatAdministrators
    where toJSON obj = Data.Aeson.Types.Internal.object ("chat_id" Data.Aeson.Types.ToJSON..= botCommandScopeChatAdministratorsChatId obj : "type" Data.Aeson.Types.ToJSON..= botCommandScopeChatAdministratorsType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("chat_id" Data.Aeson.Types.ToJSON..= botCommandScopeChatAdministratorsChatId obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= botCommandScopeChatAdministratorsType obj))
instance Data.Aeson.Types.FromJSON.FromJSON BotCommandScopeChatAdministrators
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "BotCommandScopeChatAdministrators" (\obj -> (GHC.Base.pure BotCommandScopeChatAdministrators GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'BotCommandScopeChatAdministrators' with all required fields.
mkBotCommandScopeChatAdministrators :: BotCommandScopeChatAdministratorsChatId'Variants -- ^ 'botCommandScopeChatAdministratorsChatId'
  -> Data.Text.Internal.Text -- ^ 'botCommandScopeChatAdministratorsType'
  -> BotCommandScopeChatAdministrators
mkBotCommandScopeChatAdministrators botCommandScopeChatAdministratorsChatId botCommandScopeChatAdministratorsType = BotCommandScopeChatAdministrators{botCommandScopeChatAdministratorsChatId = botCommandScopeChatAdministratorsChatId,
                                                                                                                                                      botCommandScopeChatAdministratorsType = botCommandScopeChatAdministratorsType}
-- | Defines the oneOf schema located at @components.schemas.BotCommandScopeChatAdministrators.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target supergroup (in the format \`\@supergroupusername\`)
data BotCommandScopeChatAdministratorsChatId'Variants =
   BotCommandScopeChatAdministratorsChatId'Int GHC.Types.Int
  | BotCommandScopeChatAdministratorsChatId'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON BotCommandScopeChatAdministratorsChatId'Variants
    where toJSON (BotCommandScopeChatAdministratorsChatId'Int a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BotCommandScopeChatAdministratorsChatId'Text a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON BotCommandScopeChatAdministratorsChatId'Variants
    where parseJSON val = case (BotCommandScopeChatAdministratorsChatId'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BotCommandScopeChatAdministratorsChatId'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
