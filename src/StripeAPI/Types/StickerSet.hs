-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema StickerSet
module StripeAPI.Types.StickerSet where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PhotoSize
import {-# SOURCE #-} StripeAPI.Types.Sticker

-- | Defines the object schema located at @components.schemas.StickerSet@ in the specification.
-- 
-- This object represents a sticker set.
data StickerSet = StickerSet {
  -- | contains_masks: *True*, if the sticker set contains masks
  stickerSetContainsMasks :: GHC.Types.Bool
  -- | is_animated: *True*, if the sticker set contains [animated stickers](https:\/\/telegram.org\/blog\/animated-stickers)
  , stickerSetIsAnimated :: GHC.Types.Bool
  -- | is_video: *True*, if the sticker set contains [video stickers](https:\/\/telegram.org\/blog\/video-stickers-better-reactions)
  , stickerSetIsVideo :: GHC.Types.Bool
  -- | name: Sticker set name
  , stickerSetName :: Data.Text.Internal.Text
  -- | stickers: List of all set stickers
  , stickerSetStickers :: ([Sticker])
  -- | thumb: This object represents one size of a photo or a [file](https:\/\/core.telegram.org\/bots\/api\/\#document) \/ [sticker](https:\/\/core.telegram.org\/bots\/api\/\#sticker) thumbnail.
  , stickerSetThumb :: (GHC.Maybe.Maybe PhotoSize)
  -- | title: Sticker set title
  , stickerSetTitle :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON StickerSet
    where toJSON obj = Data.Aeson.Types.Internal.object ("contains_masks" Data.Aeson.Types.ToJSON..= stickerSetContainsMasks obj : "is_animated" Data.Aeson.Types.ToJSON..= stickerSetIsAnimated obj : "is_video" Data.Aeson.Types.ToJSON..= stickerSetIsVideo obj : "name" Data.Aeson.Types.ToJSON..= stickerSetName obj : "stickers" Data.Aeson.Types.ToJSON..= stickerSetStickers obj : "thumb" Data.Aeson.Types.ToJSON..= stickerSetThumb obj : "title" Data.Aeson.Types.ToJSON..= stickerSetTitle obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("contains_masks" Data.Aeson.Types.ToJSON..= stickerSetContainsMasks obj) GHC.Base.<> (("is_animated" Data.Aeson.Types.ToJSON..= stickerSetIsAnimated obj) GHC.Base.<> (("is_video" Data.Aeson.Types.ToJSON..= stickerSetIsVideo obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= stickerSetName obj) GHC.Base.<> (("stickers" Data.Aeson.Types.ToJSON..= stickerSetStickers obj) GHC.Base.<> (("thumb" Data.Aeson.Types.ToJSON..= stickerSetThumb obj) GHC.Base.<> ("title" Data.Aeson.Types.ToJSON..= stickerSetTitle obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON StickerSet
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "StickerSet" (\obj -> ((((((GHC.Base.pure StickerSet GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "contains_masks")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_animated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_video")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stickers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "thumb")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "title"))
-- | Create a new 'StickerSet' with all required fields.
mkStickerSet :: GHC.Types.Bool -- ^ 'stickerSetContainsMasks'
  -> GHC.Types.Bool -- ^ 'stickerSetIsAnimated'
  -> GHC.Types.Bool -- ^ 'stickerSetIsVideo'
  -> Data.Text.Internal.Text -- ^ 'stickerSetName'
  -> [Sticker] -- ^ 'stickerSetStickers'
  -> Data.Text.Internal.Text -- ^ 'stickerSetTitle'
  -> StickerSet
mkStickerSet stickerSetContainsMasks stickerSetIsAnimated stickerSetIsVideo stickerSetName stickerSetStickers stickerSetTitle = StickerSet{stickerSetContainsMasks = stickerSetContainsMasks,
                                                                                                                                           stickerSetIsAnimated = stickerSetIsAnimated,
                                                                                                                                           stickerSetIsVideo = stickerSetIsVideo,
                                                                                                                                           stickerSetName = stickerSetName,
                                                                                                                                           stickerSetStickers = stickerSetStickers,
                                                                                                                                           stickerSetThumb = GHC.Maybe.Nothing,
                                                                                                                                           stickerSetTitle = stickerSetTitle}
