-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ChatMemberLeft
module StripeAPI.Types.ChatMemberLeft where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.User

-- | Defines the object schema located at @components.schemas.ChatMemberLeft@ in the specification.
-- 
-- Represents a [chat member](https:\/\/core.telegram.org\/bots\/api\/\#chatmember) that isn\'t currently a member of the chat, but may join it themselves.
data ChatMemberLeft = ChatMemberLeft {
  -- | status: The member\'s status in the chat, always “left”
  chatMemberLeftStatus :: Data.Text.Internal.Text
  -- | user: This object represents a Telegram user or bot.
  , chatMemberLeftUser :: User
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ChatMemberLeft
    where toJSON obj = Data.Aeson.Types.Internal.object ("status" Data.Aeson.Types.ToJSON..= chatMemberLeftStatus obj : "user" Data.Aeson.Types.ToJSON..= chatMemberLeftUser obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("status" Data.Aeson.Types.ToJSON..= chatMemberLeftStatus obj) GHC.Base.<> ("user" Data.Aeson.Types.ToJSON..= chatMemberLeftUser obj))
instance Data.Aeson.Types.FromJSON.FromJSON ChatMemberLeft
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ChatMemberLeft" (\obj -> (GHC.Base.pure ChatMemberLeft GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user"))
-- | Create a new 'ChatMemberLeft' with all required fields.
mkChatMemberLeft :: Data.Text.Internal.Text -- ^ 'chatMemberLeftStatus'
  -> User -- ^ 'chatMemberLeftUser'
  -> ChatMemberLeft
mkChatMemberLeft chatMemberLeftStatus chatMemberLeftUser = ChatMemberLeft{chatMemberLeftStatus = chatMemberLeftStatus,
                                                                          chatMemberLeftUser = chatMemberLeftUser}
