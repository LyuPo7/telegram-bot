-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema BotCommandScope
module StripeAPI.Types.BotCommandScope where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.BotCommandScopeAllChatAdministrators
import {-# SOURCE #-} StripeAPI.Types.BotCommandScopeAllGroupChats
import {-# SOURCE #-} StripeAPI.Types.BotCommandScopeAllPrivateChats
import {-# SOURCE #-} StripeAPI.Types.BotCommandScopeChat
import {-# SOURCE #-} StripeAPI.Types.BotCommandScopeChatAdministrators
import {-# SOURCE #-} StripeAPI.Types.BotCommandScopeChatMember
import {-# SOURCE #-} StripeAPI.Types.BotCommandScopeDefault

-- | Defines the object schema located at @components.schemas.BotCommandScope.anyOf@ in the specification.
-- 
-- This object represents the scope to which bot commands are applied. Currently, the following 7 scopes are supported:
data BotCommandScope = BotCommandScope {
  -- | chat_id: Unique identifier for the target chat or username of the target supergroup (in the format \`\@supergroupusername\`)
  botCommandScopeChatId :: (GHC.Maybe.Maybe BotCommandScopeChatId'Variants)
  -- | type: Scope type, must be *default*
  , botCommandScopeType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | user_id: Unique identifier of the target user
  , botCommandScopeUserId :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON BotCommandScope
    where toJSON obj = Data.Aeson.Types.Internal.object ("chat_id" Data.Aeson.Types.ToJSON..= botCommandScopeChatId obj : "type" Data.Aeson.Types.ToJSON..= botCommandScopeType obj : "user_id" Data.Aeson.Types.ToJSON..= botCommandScopeUserId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("chat_id" Data.Aeson.Types.ToJSON..= botCommandScopeChatId obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= botCommandScopeType obj) GHC.Base.<> ("user_id" Data.Aeson.Types.ToJSON..= botCommandScopeUserId obj)))
instance Data.Aeson.Types.FromJSON.FromJSON BotCommandScope
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "BotCommandScope" (\obj -> ((GHC.Base.pure BotCommandScope GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "user_id"))
-- | Create a new 'BotCommandScope' with all required fields.
mkBotCommandScope :: BotCommandScope
mkBotCommandScope = BotCommandScope{botCommandScopeChatId = GHC.Maybe.Nothing,
                                    botCommandScopeType = GHC.Maybe.Nothing,
                                    botCommandScopeUserId = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @components.schemas.BotCommandScope.anyOf.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target supergroup (in the format \`\@supergroupusername\`)
data BotCommandScopeChatId'Variants =
   BotCommandScopeChatId'Int GHC.Types.Int
  | BotCommandScopeChatId'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON BotCommandScopeChatId'Variants
    where toJSON (BotCommandScopeChatId'Int a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (BotCommandScopeChatId'Text a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON BotCommandScopeChatId'Variants
    where parseJSON val = case (BotCommandScopeChatId'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BotCommandScopeChatId'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
