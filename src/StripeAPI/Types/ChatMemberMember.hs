-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ChatMemberMember
module StripeAPI.Types.ChatMemberMember where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.User

-- | Defines the object schema located at @components.schemas.ChatMemberMember@ in the specification.
-- 
-- Represents a [chat member](https:\/\/core.telegram.org\/bots\/api\/\#chatmember) that has no additional privileges or restrictions.
data ChatMemberMember = ChatMemberMember {
  -- | status: The member\'s status in the chat, always “member”
  chatMemberMemberStatus :: Data.Text.Internal.Text
  -- | user: This object represents a Telegram user or bot.
  , chatMemberMemberUser :: User
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ChatMemberMember
    where toJSON obj = Data.Aeson.Types.Internal.object ("status" Data.Aeson.Types.ToJSON..= chatMemberMemberStatus obj : "user" Data.Aeson.Types.ToJSON..= chatMemberMemberUser obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("status" Data.Aeson.Types.ToJSON..= chatMemberMemberStatus obj) GHC.Base.<> ("user" Data.Aeson.Types.ToJSON..= chatMemberMemberUser obj))
instance Data.Aeson.Types.FromJSON.FromJSON ChatMemberMember
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ChatMemberMember" (\obj -> (GHC.Base.pure ChatMemberMember GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user"))
-- | Create a new 'ChatMemberMember' with all required fields.
mkChatMemberMember :: Data.Text.Internal.Text -- ^ 'chatMemberMemberStatus'
  -> User -- ^ 'chatMemberMemberUser'
  -> ChatMemberMember
mkChatMemberMember chatMemberMemberStatus chatMemberMemberUser = ChatMemberMember{chatMemberMemberStatus = chatMemberMemberStatus,
                                                                                  chatMemberMemberUser = chatMemberMemberUser}
