-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postGetChatMemberCount
module StripeAPI.Operations.PostGetChatMemberCount where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /getChatMemberCount
-- 
-- Use this method to get the number of members in a chat. Returns *Int* on success.
postGetChatMemberCount :: forall m . StripeAPI.Common.MonadHTTP m => PostGetChatMemberCountRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostGetChatMemberCountResponse) -- ^ Monadic computation which returns the result of the operation
postGetChatMemberCount body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostGetChatMemberCountResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostGetChatMemberCountResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     PostGetChatMemberCountResponseBody200)
                                                                                                                                                                               | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostGetChatMemberCountResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                       Error)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/getChatMemberCount") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/getChatMemberCount.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostGetChatMemberCountRequestBody = PostGetChatMemberCountRequestBody {
  -- | chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format \`\@channelusername\`)
  postGetChatMemberCountRequestBodyChatId :: PostGetChatMemberCountRequestBodyChatId'Variants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostGetChatMemberCountRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("chat_id" Data.Aeson.Types.ToJSON..= postGetChatMemberCountRequestBodyChatId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("chat_id" Data.Aeson.Types.ToJSON..= postGetChatMemberCountRequestBodyChatId obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostGetChatMemberCountRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostGetChatMemberCountRequestBody" (\obj -> GHC.Base.pure PostGetChatMemberCountRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id"))
-- | Create a new 'PostGetChatMemberCountRequestBody' with all required fields.
mkPostGetChatMemberCountRequestBody :: PostGetChatMemberCountRequestBodyChatId'Variants -- ^ 'postGetChatMemberCountRequestBodyChatId'
  -> PostGetChatMemberCountRequestBody
mkPostGetChatMemberCountRequestBody postGetChatMemberCountRequestBodyChatId = PostGetChatMemberCountRequestBody{postGetChatMemberCountRequestBodyChatId = postGetChatMemberCountRequestBodyChatId}
-- | Defines the oneOf schema located at @paths.\/getChatMemberCount.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target supergroup or channel (in the format \`\@channelusername\`)
data PostGetChatMemberCountRequestBodyChatId'Variants =
   PostGetChatMemberCountRequestBodyChatId'Int GHC.Types.Int
  | PostGetChatMemberCountRequestBodyChatId'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostGetChatMemberCountRequestBodyChatId'Variants
    where toJSON (PostGetChatMemberCountRequestBodyChatId'Int a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostGetChatMemberCountRequestBodyChatId'Text a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostGetChatMemberCountRequestBodyChatId'Variants
    where parseJSON val = case (PostGetChatMemberCountRequestBodyChatId'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostGetChatMemberCountRequestBodyChatId'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postGetChatMemberCount'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostGetChatMemberCountResponseError' is used.
data PostGetChatMemberCountResponse =
   PostGetChatMemberCountResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostGetChatMemberCountResponse200 PostGetChatMemberCountResponseBody200 -- ^ 
  | PostGetChatMemberCountResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/getChatMemberCount.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostGetChatMemberCountResponseBody200 = PostGetChatMemberCountResponseBody200 {
  -- | ok
  postGetChatMemberCountResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postGetChatMemberCountResponseBody200Result :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostGetChatMemberCountResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postGetChatMemberCountResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postGetChatMemberCountResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postGetChatMemberCountResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postGetChatMemberCountResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostGetChatMemberCountResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostGetChatMemberCountResponseBody200" (\obj -> (GHC.Base.pure PostGetChatMemberCountResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostGetChatMemberCountResponseBody200' with all required fields.
mkPostGetChatMemberCountResponseBody200 :: GHC.Types.Bool -- ^ 'postGetChatMemberCountResponseBody200Ok'
  -> GHC.Types.Int -- ^ 'postGetChatMemberCountResponseBody200Result'
  -> PostGetChatMemberCountResponseBody200
mkPostGetChatMemberCountResponseBody200 postGetChatMemberCountResponseBody200Ok postGetChatMemberCountResponseBody200Result = PostGetChatMemberCountResponseBody200{postGetChatMemberCountResponseBody200Ok = postGetChatMemberCountResponseBody200Ok,
                                                                                                                                                                    postGetChatMemberCountResponseBody200Result = postGetChatMemberCountResponseBody200Result}
