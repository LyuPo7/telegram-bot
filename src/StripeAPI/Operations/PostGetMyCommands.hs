-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postGetMyCommands
module StripeAPI.Operations.PostGetMyCommands where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /getMyCommands
-- 
-- Use this method to get the current list of the bot\'s commands for the given scope and user language. Returns Array of [BotCommand](https:\/\/core.telegram.org\/bots\/api\/\#botcommand) on success. If commands aren\'t set, an empty list is returned.
postGetMyCommands :: forall m . StripeAPI.Common.MonadHTTP m => PostGetMyCommandsRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostGetMyCommandsResponse) -- ^ Monadic computation which returns the result of the operation
postGetMyCommands body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostGetMyCommandsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostGetMyCommandsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      PostGetMyCommandsResponseBody200)
                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostGetMyCommandsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                        Error)
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/getMyCommands") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/getMyCommands.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostGetMyCommandsRequestBody = PostGetMyCommandsRequestBody {
  -- | language_code: A two-letter ISO 639-1 language code or an empty string
  postGetMyCommandsRequestBodyLanguageCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | scope: This object represents the scope to which bot commands are applied. Currently, the following 7 scopes are supported:
  , postGetMyCommandsRequestBodyScope :: (GHC.Maybe.Maybe BotCommandScope)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostGetMyCommandsRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("language_code" Data.Aeson.Types.ToJSON..= postGetMyCommandsRequestBodyLanguageCode obj : "scope" Data.Aeson.Types.ToJSON..= postGetMyCommandsRequestBodyScope obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("language_code" Data.Aeson.Types.ToJSON..= postGetMyCommandsRequestBodyLanguageCode obj) GHC.Base.<> ("scope" Data.Aeson.Types.ToJSON..= postGetMyCommandsRequestBodyScope obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostGetMyCommandsRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostGetMyCommandsRequestBody" (\obj -> (GHC.Base.pure PostGetMyCommandsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "language_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "scope"))
-- | Create a new 'PostGetMyCommandsRequestBody' with all required fields.
mkPostGetMyCommandsRequestBody :: PostGetMyCommandsRequestBody
mkPostGetMyCommandsRequestBody = PostGetMyCommandsRequestBody{postGetMyCommandsRequestBodyLanguageCode = GHC.Maybe.Nothing,
                                                              postGetMyCommandsRequestBodyScope = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'postGetMyCommands'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostGetMyCommandsResponseError' is used.
data PostGetMyCommandsResponse =
   PostGetMyCommandsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostGetMyCommandsResponse200 PostGetMyCommandsResponseBody200 -- ^ 
  | PostGetMyCommandsResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/getMyCommands.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostGetMyCommandsResponseBody200 = PostGetMyCommandsResponseBody200 {
  -- | ok
  postGetMyCommandsResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postGetMyCommandsResponseBody200Result :: ([BotCommand])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostGetMyCommandsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postGetMyCommandsResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postGetMyCommandsResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postGetMyCommandsResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postGetMyCommandsResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostGetMyCommandsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostGetMyCommandsResponseBody200" (\obj -> (GHC.Base.pure PostGetMyCommandsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostGetMyCommandsResponseBody200' with all required fields.
mkPostGetMyCommandsResponseBody200 :: GHC.Types.Bool -- ^ 'postGetMyCommandsResponseBody200Ok'
  -> [BotCommand] -- ^ 'postGetMyCommandsResponseBody200Result'
  -> PostGetMyCommandsResponseBody200
mkPostGetMyCommandsResponseBody200 postGetMyCommandsResponseBody200Ok postGetMyCommandsResponseBody200Result = PostGetMyCommandsResponseBody200{postGetMyCommandsResponseBody200Ok = postGetMyCommandsResponseBody200Ok,
                                                                                                                                                postGetMyCommandsResponseBody200Result = postGetMyCommandsResponseBody200Result}
