-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postSetMyCommands
module StripeAPI.Operations.PostSetMyCommands where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /setMyCommands
-- 
-- Use this method to change the list of the bot\'s commands. See [https:\/\/core.telegram.org\/bots\#commands](https:\/\/core.telegram.org\/bots\#commands) for more details about bot commands. Returns *True* on success.
postSetMyCommands :: forall m . StripeAPI.Common.MonadHTTP m => PostSetMyCommandsRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostSetMyCommandsResponse) -- ^ Monadic computation which returns the result of the operation
postSetMyCommands body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostSetMyCommandsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostSetMyCommandsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      PostSetMyCommandsResponseBody200)
                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostSetMyCommandsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                        Error)
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setMyCommands") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/setMyCommands.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSetMyCommandsRequestBody = PostSetMyCommandsRequestBody {
  -- | commands: A JSON-serialized list of bot commands to be set as the list of the bot\'s commands. At most 100 commands can be specified.
  postSetMyCommandsRequestBodyCommands :: ([BotCommand])
  -- | language_code: A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
  , postSetMyCommandsRequestBodyLanguageCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | scope: This object represents the scope to which bot commands are applied. Currently, the following 7 scopes are supported:
  , postSetMyCommandsRequestBodyScope :: (GHC.Maybe.Maybe BotCommandScope)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSetMyCommandsRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("commands" Data.Aeson.Types.ToJSON..= postSetMyCommandsRequestBodyCommands obj : "language_code" Data.Aeson.Types.ToJSON..= postSetMyCommandsRequestBodyLanguageCode obj : "scope" Data.Aeson.Types.ToJSON..= postSetMyCommandsRequestBodyScope obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("commands" Data.Aeson.Types.ToJSON..= postSetMyCommandsRequestBodyCommands obj) GHC.Base.<> (("language_code" Data.Aeson.Types.ToJSON..= postSetMyCommandsRequestBodyLanguageCode obj) GHC.Base.<> ("scope" Data.Aeson.Types.ToJSON..= postSetMyCommandsRequestBodyScope obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSetMyCommandsRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSetMyCommandsRequestBody" (\obj -> ((GHC.Base.pure PostSetMyCommandsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "commands")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "language_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "scope"))
-- | Create a new 'PostSetMyCommandsRequestBody' with all required fields.
mkPostSetMyCommandsRequestBody :: [BotCommand] -- ^ 'postSetMyCommandsRequestBodyCommands'
  -> PostSetMyCommandsRequestBody
mkPostSetMyCommandsRequestBody postSetMyCommandsRequestBodyCommands = PostSetMyCommandsRequestBody{postSetMyCommandsRequestBodyCommands = postSetMyCommandsRequestBodyCommands,
                                                                                                   postSetMyCommandsRequestBodyLanguageCode = GHC.Maybe.Nothing,
                                                                                                   postSetMyCommandsRequestBodyScope = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'postSetMyCommands'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSetMyCommandsResponseError' is used.
data PostSetMyCommandsResponse =
   PostSetMyCommandsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostSetMyCommandsResponse200 PostSetMyCommandsResponseBody200 -- ^ 
  | PostSetMyCommandsResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/setMyCommands.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSetMyCommandsResponseBody200 = PostSetMyCommandsResponseBody200 {
  -- | ok
  postSetMyCommandsResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postSetMyCommandsResponseBody200Result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSetMyCommandsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postSetMyCommandsResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postSetMyCommandsResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postSetMyCommandsResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postSetMyCommandsResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostSetMyCommandsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSetMyCommandsResponseBody200" (\obj -> (GHC.Base.pure PostSetMyCommandsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostSetMyCommandsResponseBody200' with all required fields.
mkPostSetMyCommandsResponseBody200 :: GHC.Types.Bool -- ^ 'postSetMyCommandsResponseBody200Ok'
  -> GHC.Types.Bool -- ^ 'postSetMyCommandsResponseBody200Result'
  -> PostSetMyCommandsResponseBody200
mkPostSetMyCommandsResponseBody200 postSetMyCommandsResponseBody200Ok postSetMyCommandsResponseBody200Result = PostSetMyCommandsResponseBody200{postSetMyCommandsResponseBody200Ok = postSetMyCommandsResponseBody200Ok,
                                                                                                                                                postSetMyCommandsResponseBody200Result = postSetMyCommandsResponseBody200Result}
