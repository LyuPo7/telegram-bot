-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postSetStickerSetThumb
module StripeAPI.Operations.PostSetStickerSetThumb where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /setStickerSetThumb
-- 
-- Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Video thumbnails can be set only for video sticker sets only. Returns *True* on success.
postSetStickerSetThumb :: forall m . StripeAPI.Common.MonadHTTP m => StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostSetStickerSetThumbResponse) -- ^ Monadic computation which returns the result of the operation
postSetStickerSetThumb = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostSetStickerSetThumbResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostSetStickerSetThumbResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                PostSetStickerSetThumbResponseBody200)
                                                                                                                                                                          | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostSetStickerSetThumbResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                  Error)
                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setStickerSetThumb") GHC.Base.mempty)
-- | Represents a response of the operation 'postSetStickerSetThumb'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSetStickerSetThumbResponseError' is used.
data PostSetStickerSetThumbResponse =
   PostSetStickerSetThumbResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostSetStickerSetThumbResponse200 PostSetStickerSetThumbResponseBody200 -- ^ 
  | PostSetStickerSetThumbResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/setStickerSetThumb.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSetStickerSetThumbResponseBody200 = PostSetStickerSetThumbResponseBody200 {
  -- | ok
  postSetStickerSetThumbResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postSetStickerSetThumbResponseBody200Result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSetStickerSetThumbResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postSetStickerSetThumbResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postSetStickerSetThumbResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postSetStickerSetThumbResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postSetStickerSetThumbResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostSetStickerSetThumbResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSetStickerSetThumbResponseBody200" (\obj -> (GHC.Base.pure PostSetStickerSetThumbResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostSetStickerSetThumbResponseBody200' with all required fields.
mkPostSetStickerSetThumbResponseBody200 :: GHC.Types.Bool -- ^ 'postSetStickerSetThumbResponseBody200Ok'
  -> GHC.Types.Bool -- ^ 'postSetStickerSetThumbResponseBody200Result'
  -> PostSetStickerSetThumbResponseBody200
mkPostSetStickerSetThumbResponseBody200 postSetStickerSetThumbResponseBody200Ok postSetStickerSetThumbResponseBody200Result = PostSetStickerSetThumbResponseBody200{postSetStickerSetThumbResponseBody200Ok = postSetStickerSetThumbResponseBody200Ok,
                                                                                                                                                                    postSetStickerSetThumbResponseBody200Result = postSetStickerSetThumbResponseBody200Result}
