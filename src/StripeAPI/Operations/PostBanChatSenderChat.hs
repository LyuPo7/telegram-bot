-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postBanChatSenderChat
module StripeAPI.Operations.PostBanChatSenderChat where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /banChatSenderChat
-- 
-- Use this method to ban a channel chat in a supergroup or a channel. Until the chat is [unbanned](https:\/\/core.telegram.org\/bots\/api\/\#unbanchatsenderchat), the owner of the banned chat won\'t be able to send messages on behalf of **any of their channels**. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns *True* on success.
postBanChatSenderChat :: forall m . StripeAPI.Common.MonadHTTP m => PostBanChatSenderChatRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostBanChatSenderChatResponse) -- ^ Monadic computation which returns the result of the operation
postBanChatSenderChat body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostBanChatSenderChatResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostBanChatSenderChatResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  PostBanChatSenderChatResponseBody200)
                                                                                                                                                                             | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostBanChatSenderChatResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                    Error)
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/banChatSenderChat") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/banChatSenderChat.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostBanChatSenderChatRequestBody = PostBanChatSenderChatRequestBody {
  -- | chat_id: Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
  postBanChatSenderChatRequestBodyChatId :: PostBanChatSenderChatRequestBodyChatId'Variants
  -- | sender_chat_id: Unique identifier of the target sender chat
  , postBanChatSenderChatRequestBodySenderChatId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostBanChatSenderChatRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("chat_id" Data.Aeson.Types.ToJSON..= postBanChatSenderChatRequestBodyChatId obj : "sender_chat_id" Data.Aeson.Types.ToJSON..= postBanChatSenderChatRequestBodySenderChatId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("chat_id" Data.Aeson.Types.ToJSON..= postBanChatSenderChatRequestBodyChatId obj) GHC.Base.<> ("sender_chat_id" Data.Aeson.Types.ToJSON..= postBanChatSenderChatRequestBodySenderChatId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostBanChatSenderChatRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostBanChatSenderChatRequestBody" (\obj -> (GHC.Base.pure PostBanChatSenderChatRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "sender_chat_id"))
-- | Create a new 'PostBanChatSenderChatRequestBody' with all required fields.
mkPostBanChatSenderChatRequestBody :: PostBanChatSenderChatRequestBodyChatId'Variants -- ^ 'postBanChatSenderChatRequestBodyChatId'
  -> GHC.Types.Int -- ^ 'postBanChatSenderChatRequestBodySenderChatId'
  -> PostBanChatSenderChatRequestBody
mkPostBanChatSenderChatRequestBody postBanChatSenderChatRequestBodyChatId postBanChatSenderChatRequestBodySenderChatId = PostBanChatSenderChatRequestBody{postBanChatSenderChatRequestBodyChatId = postBanChatSenderChatRequestBodyChatId,
                                                                                                                                                          postBanChatSenderChatRequestBodySenderChatId = postBanChatSenderChatRequestBodySenderChatId}
-- | Defines the oneOf schema located at @paths.\/banChatSenderChat.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
data PostBanChatSenderChatRequestBodyChatId'Variants =
   PostBanChatSenderChatRequestBodyChatId'Int GHC.Types.Int
  | PostBanChatSenderChatRequestBodyChatId'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostBanChatSenderChatRequestBodyChatId'Variants
    where toJSON (PostBanChatSenderChatRequestBodyChatId'Int a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostBanChatSenderChatRequestBodyChatId'Text a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostBanChatSenderChatRequestBodyChatId'Variants
    where parseJSON val = case (PostBanChatSenderChatRequestBodyChatId'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostBanChatSenderChatRequestBodyChatId'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postBanChatSenderChat'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostBanChatSenderChatResponseError' is used.
data PostBanChatSenderChatResponse =
   PostBanChatSenderChatResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostBanChatSenderChatResponse200 PostBanChatSenderChatResponseBody200 -- ^ 
  | PostBanChatSenderChatResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/banChatSenderChat.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostBanChatSenderChatResponseBody200 = PostBanChatSenderChatResponseBody200 {
  -- | ok
  postBanChatSenderChatResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postBanChatSenderChatResponseBody200Result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostBanChatSenderChatResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postBanChatSenderChatResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postBanChatSenderChatResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postBanChatSenderChatResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postBanChatSenderChatResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostBanChatSenderChatResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostBanChatSenderChatResponseBody200" (\obj -> (GHC.Base.pure PostBanChatSenderChatResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostBanChatSenderChatResponseBody200' with all required fields.
mkPostBanChatSenderChatResponseBody200 :: GHC.Types.Bool -- ^ 'postBanChatSenderChatResponseBody200Ok'
  -> GHC.Types.Bool -- ^ 'postBanChatSenderChatResponseBody200Result'
  -> PostBanChatSenderChatResponseBody200
mkPostBanChatSenderChatResponseBody200 postBanChatSenderChatResponseBody200Ok postBanChatSenderChatResponseBody200Result = PostBanChatSenderChatResponseBody200{postBanChatSenderChatResponseBody200Ok = postBanChatSenderChatResponseBody200Ok,
                                                                                                                                                                postBanChatSenderChatResponseBody200Result = postBanChatSenderChatResponseBody200Result}
