-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postApproveChatJoinRequest
module StripeAPI.Operations.PostApproveChatJoinRequest where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /approveChatJoinRequest
-- 
-- Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the *can\\_invite\\_users* administrator right. Returns *True* on success.
postApproveChatJoinRequest :: forall m . StripeAPI.Common.MonadHTTP m => PostApproveChatJoinRequestRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostApproveChatJoinRequestResponse) -- ^ Monadic computation which returns the result of the operation
postApproveChatJoinRequest body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostApproveChatJoinRequestResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostApproveChatJoinRequestResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 PostApproveChatJoinRequestResponseBody200)
                                                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostApproveChatJoinRequestResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                   Error)
                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/approveChatJoinRequest") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/approveChatJoinRequest.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostApproveChatJoinRequestRequestBody = PostApproveChatJoinRequestRequestBody {
  -- | chat_id: Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
  postApproveChatJoinRequestRequestBodyChatId :: PostApproveChatJoinRequestRequestBodyChatId'Variants
  -- | user_id: Unique identifier of the target user
  , postApproveChatJoinRequestRequestBodyUserId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostApproveChatJoinRequestRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("chat_id" Data.Aeson.Types.ToJSON..= postApproveChatJoinRequestRequestBodyChatId obj : "user_id" Data.Aeson.Types.ToJSON..= postApproveChatJoinRequestRequestBodyUserId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("chat_id" Data.Aeson.Types.ToJSON..= postApproveChatJoinRequestRequestBodyChatId obj) GHC.Base.<> ("user_id" Data.Aeson.Types.ToJSON..= postApproveChatJoinRequestRequestBodyUserId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostApproveChatJoinRequestRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostApproveChatJoinRequestRequestBody" (\obj -> (GHC.Base.pure PostApproveChatJoinRequestRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user_id"))
-- | Create a new 'PostApproveChatJoinRequestRequestBody' with all required fields.
mkPostApproveChatJoinRequestRequestBody :: PostApproveChatJoinRequestRequestBodyChatId'Variants -- ^ 'postApproveChatJoinRequestRequestBodyChatId'
  -> GHC.Types.Int -- ^ 'postApproveChatJoinRequestRequestBodyUserId'
  -> PostApproveChatJoinRequestRequestBody
mkPostApproveChatJoinRequestRequestBody postApproveChatJoinRequestRequestBodyChatId postApproveChatJoinRequestRequestBodyUserId = PostApproveChatJoinRequestRequestBody{postApproveChatJoinRequestRequestBodyChatId = postApproveChatJoinRequestRequestBodyChatId,
                                                                                                                                                                        postApproveChatJoinRequestRequestBodyUserId = postApproveChatJoinRequestRequestBodyUserId}
-- | Defines the oneOf schema located at @paths.\/approveChatJoinRequest.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
data PostApproveChatJoinRequestRequestBodyChatId'Variants =
   PostApproveChatJoinRequestRequestBodyChatId'Int GHC.Types.Int
  | PostApproveChatJoinRequestRequestBodyChatId'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostApproveChatJoinRequestRequestBodyChatId'Variants
    where toJSON (PostApproveChatJoinRequestRequestBodyChatId'Int a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostApproveChatJoinRequestRequestBodyChatId'Text a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostApproveChatJoinRequestRequestBodyChatId'Variants
    where parseJSON val = case (PostApproveChatJoinRequestRequestBodyChatId'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostApproveChatJoinRequestRequestBodyChatId'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postApproveChatJoinRequest'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostApproveChatJoinRequestResponseError' is used.
data PostApproveChatJoinRequestResponse =
   PostApproveChatJoinRequestResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostApproveChatJoinRequestResponse200 PostApproveChatJoinRequestResponseBody200 -- ^ 
  | PostApproveChatJoinRequestResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/approveChatJoinRequest.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostApproveChatJoinRequestResponseBody200 = PostApproveChatJoinRequestResponseBody200 {
  -- | ok
  postApproveChatJoinRequestResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postApproveChatJoinRequestResponseBody200Result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostApproveChatJoinRequestResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postApproveChatJoinRequestResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postApproveChatJoinRequestResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postApproveChatJoinRequestResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postApproveChatJoinRequestResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostApproveChatJoinRequestResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostApproveChatJoinRequestResponseBody200" (\obj -> (GHC.Base.pure PostApproveChatJoinRequestResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostApproveChatJoinRequestResponseBody200' with all required fields.
mkPostApproveChatJoinRequestResponseBody200 :: GHC.Types.Bool -- ^ 'postApproveChatJoinRequestResponseBody200Ok'
  -> GHC.Types.Bool -- ^ 'postApproveChatJoinRequestResponseBody200Result'
  -> PostApproveChatJoinRequestResponseBody200
mkPostApproveChatJoinRequestResponseBody200 postApproveChatJoinRequestResponseBody200Ok postApproveChatJoinRequestResponseBody200Result = PostApproveChatJoinRequestResponseBody200{postApproveChatJoinRequestResponseBody200Ok = postApproveChatJoinRequestResponseBody200Ok,
                                                                                                                                                                                    postApproveChatJoinRequestResponseBody200Result = postApproveChatJoinRequestResponseBody200Result}
