-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postDeleteMyCommands
module StripeAPI.Operations.PostDeleteMyCommands where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /deleteMyCommands
-- 
-- Use this method to delete the list of the bot\'s commands for the given scope and user language. After deletion, [higher level commands](https:\/\/core.telegram.org\/bots\/api\/\#determining-list-of-commands) will be shown to affected users. Returns *True* on success.
postDeleteMyCommands :: forall m . StripeAPI.Common.MonadHTTP m => PostDeleteMyCommandsRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostDeleteMyCommandsResponse) -- ^ Monadic computation which returns the result of the operation
postDeleteMyCommands body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostDeleteMyCommandsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostDeleteMyCommandsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               PostDeleteMyCommandsResponseBody200)
                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostDeleteMyCommandsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                 Error)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteMyCommands") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/deleteMyCommands.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostDeleteMyCommandsRequestBody = PostDeleteMyCommandsRequestBody {
  -- | language_code: A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
  postDeleteMyCommandsRequestBodyLanguageCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | scope: This object represents the scope to which bot commands are applied. Currently, the following 7 scopes are supported:
  , postDeleteMyCommandsRequestBodyScope :: (GHC.Maybe.Maybe BotCommandScope)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostDeleteMyCommandsRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("language_code" Data.Aeson.Types.ToJSON..= postDeleteMyCommandsRequestBodyLanguageCode obj : "scope" Data.Aeson.Types.ToJSON..= postDeleteMyCommandsRequestBodyScope obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("language_code" Data.Aeson.Types.ToJSON..= postDeleteMyCommandsRequestBodyLanguageCode obj) GHC.Base.<> ("scope" Data.Aeson.Types.ToJSON..= postDeleteMyCommandsRequestBodyScope obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostDeleteMyCommandsRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostDeleteMyCommandsRequestBody" (\obj -> (GHC.Base.pure PostDeleteMyCommandsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "language_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "scope"))
-- | Create a new 'PostDeleteMyCommandsRequestBody' with all required fields.
mkPostDeleteMyCommandsRequestBody :: PostDeleteMyCommandsRequestBody
mkPostDeleteMyCommandsRequestBody = PostDeleteMyCommandsRequestBody{postDeleteMyCommandsRequestBodyLanguageCode = GHC.Maybe.Nothing,
                                                                    postDeleteMyCommandsRequestBodyScope = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'postDeleteMyCommands'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostDeleteMyCommandsResponseError' is used.
data PostDeleteMyCommandsResponse =
   PostDeleteMyCommandsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostDeleteMyCommandsResponse200 PostDeleteMyCommandsResponseBody200 -- ^ 
  | PostDeleteMyCommandsResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/deleteMyCommands.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostDeleteMyCommandsResponseBody200 = PostDeleteMyCommandsResponseBody200 {
  -- | ok
  postDeleteMyCommandsResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postDeleteMyCommandsResponseBody200Result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostDeleteMyCommandsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postDeleteMyCommandsResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postDeleteMyCommandsResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postDeleteMyCommandsResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postDeleteMyCommandsResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostDeleteMyCommandsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostDeleteMyCommandsResponseBody200" (\obj -> (GHC.Base.pure PostDeleteMyCommandsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostDeleteMyCommandsResponseBody200' with all required fields.
mkPostDeleteMyCommandsResponseBody200 :: GHC.Types.Bool -- ^ 'postDeleteMyCommandsResponseBody200Ok'
  -> GHC.Types.Bool -- ^ 'postDeleteMyCommandsResponseBody200Result'
  -> PostDeleteMyCommandsResponseBody200
mkPostDeleteMyCommandsResponseBody200 postDeleteMyCommandsResponseBody200Ok postDeleteMyCommandsResponseBody200Result = PostDeleteMyCommandsResponseBody200{postDeleteMyCommandsResponseBody200Ok = postDeleteMyCommandsResponseBody200Ok,
                                                                                                                                                            postDeleteMyCommandsResponseBody200Result = postDeleteMyCommandsResponseBody200Result}
