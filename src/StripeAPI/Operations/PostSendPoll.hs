-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postSendPoll
module StripeAPI.Operations.PostSendPoll where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /sendPoll
-- 
-- Use this method to send a native poll. On success, the sent [Message](https:\/\/core.telegram.org\/bots\/api\/\#message) is returned.
postSendPoll :: forall m . StripeAPI.Common.MonadHTTP m => PostSendPollRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostSendPollResponse) -- ^ Monadic computation which returns the result of the operation
postSendPoll body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostSendPollResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostSendPollResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                       PostSendPollResponseBody200)
                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostSendPollResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                         Error)
                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sendPoll") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/sendPoll.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSendPollRequestBody = PostSendPollRequestBody {
  -- | allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
  postSendPollRequestBodyAllowSendingWithoutReply :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | allows_multiple_answers: *True*, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
  , postSendPollRequestBodyAllowsMultipleAnswers :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | chat_id: Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
  , postSendPollRequestBodyChatId :: PostSendPollRequestBodyChatId'Variants
  -- | close_date: Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can\'t be used together with *open\\_period*.
  , postSendPollRequestBodyCloseDate :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | correct_option_id: 0-based identifier of the correct answer option, required for polls in quiz mode
  , postSendPollRequestBodyCorrectOptionId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | disable_notification: Sends the message [silently](https:\/\/telegram.org\/blog\/channels-2-0\#silent-messages). Users will receive a notification with no sound.
  , postSendPollRequestBodyDisableNotification :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | explanation: Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 200
  -- * Minimum length of 0
  , postSendPollRequestBodyExplanation :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | explanation_entities: A JSON-serialized list of special entities that appear in the poll explanation, which can be specified instead of *parse\\_mode*
  , postSendPollRequestBodyExplanationEntities :: (GHC.Maybe.Maybe ([MessageEntity]))
  -- | explanation_parse_mode: Mode for parsing entities in the explanation. See [formatting options](https:\/\/core.telegram.org\/bots\/api\/\#formatting-options) for more details.
  , postSendPollRequestBodyExplanationParseMode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | is_anonymous: *True*, if the poll needs to be anonymous, defaults to *True*
  , postSendPollRequestBodyIsAnonymous :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | is_closed: Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
  , postSendPollRequestBodyIsClosed :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | open_period: Amount of time in seconds the poll will be active after creation, 5-600. Can\'t be used together with *close\\_date*.
  , postSendPollRequestBodyOpenPeriod :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | options: A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
  , postSendPollRequestBodyOptions :: ([Data.Text.Internal.Text])
  -- | protect_content: Protects the contents of the sent message from forwarding and saving
  , postSendPollRequestBodyProtectContent :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | question: Poll question, 1-300 characters
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 300
  -- * Minimum length of 1
  , postSendPollRequestBodyQuestion :: Data.Text.Internal.Text
  -- | reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https:\/\/core.telegram.org\/bots\#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https:\/\/core.telegram.org\/bots\#keyboards), instructions to remove reply keyboard or to force a reply from the user.
  , postSendPollRequestBodyReplyMarkup :: (GHC.Maybe.Maybe PostSendPollRequestBodyReplyMarkup')
  -- | reply_to_message_id: If the message is a reply, ID of the original message
  , postSendPollRequestBodyReplyToMessageId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | type: Poll type, “quiz” or “regular”, defaults to “regular”
  , postSendPollRequestBodyType :: (GHC.Maybe.Maybe PostSendPollRequestBodyType')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSendPollRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("allow_sending_without_reply" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyAllowSendingWithoutReply obj : "allows_multiple_answers" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyAllowsMultipleAnswers obj : "chat_id" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyChatId obj : "close_date" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyCloseDate obj : "correct_option_id" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyCorrectOptionId obj : "disable_notification" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyDisableNotification obj : "explanation" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyExplanation obj : "explanation_entities" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyExplanationEntities obj : "explanation_parse_mode" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyExplanationParseMode obj : "is_anonymous" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyIsAnonymous obj : "is_closed" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyIsClosed obj : "open_period" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyOpenPeriod obj : "options" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyOptions obj : "protect_content" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyProtectContent obj : "question" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyQuestion obj : "reply_markup" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup obj : "reply_to_message_id" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyToMessageId obj : "type" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("allow_sending_without_reply" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyAllowSendingWithoutReply obj) GHC.Base.<> (("allows_multiple_answers" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyAllowsMultipleAnswers obj) GHC.Base.<> (("chat_id" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyChatId obj) GHC.Base.<> (("close_date" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyCloseDate obj) GHC.Base.<> (("correct_option_id" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyCorrectOptionId obj) GHC.Base.<> (("disable_notification" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyDisableNotification obj) GHC.Base.<> (("explanation" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyExplanation obj) GHC.Base.<> (("explanation_entities" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyExplanationEntities obj) GHC.Base.<> (("explanation_parse_mode" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyExplanationParseMode obj) GHC.Base.<> (("is_anonymous" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyIsAnonymous obj) GHC.Base.<> (("is_closed" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyIsClosed obj) GHC.Base.<> (("open_period" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyOpenPeriod obj) GHC.Base.<> (("options" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyOptions obj) GHC.Base.<> (("protect_content" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyProtectContent obj) GHC.Base.<> (("question" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyQuestion obj) GHC.Base.<> (("reply_markup" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup obj) GHC.Base.<> (("reply_to_message_id" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyToMessageId obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyType obj))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostSendPollRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSendPollRequestBody" (\obj -> (((((((((((((((((GHC.Base.pure PostSendPollRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "allow_sending_without_reply")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "allows_multiple_answers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "close_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "correct_option_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "disable_notification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "explanation_entities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "explanation_parse_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "is_anonymous")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "is_closed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "open_period")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "protect_content")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "question")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reply_markup")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reply_to_message_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Create a new 'PostSendPollRequestBody' with all required fields.
mkPostSendPollRequestBody :: PostSendPollRequestBodyChatId'Variants -- ^ 'postSendPollRequestBodyChatId'
  -> [Data.Text.Internal.Text] -- ^ 'postSendPollRequestBodyOptions'
  -> Data.Text.Internal.Text -- ^ 'postSendPollRequestBodyQuestion'
  -> PostSendPollRequestBody
mkPostSendPollRequestBody postSendPollRequestBodyChatId postSendPollRequestBodyOptions postSendPollRequestBodyQuestion = PostSendPollRequestBody{postSendPollRequestBodyAllowSendingWithoutReply = GHC.Maybe.Nothing,
                                                                                                                                                 postSendPollRequestBodyAllowsMultipleAnswers = GHC.Maybe.Nothing,
                                                                                                                                                 postSendPollRequestBodyChatId = postSendPollRequestBodyChatId,
                                                                                                                                                 postSendPollRequestBodyCloseDate = GHC.Maybe.Nothing,
                                                                                                                                                 postSendPollRequestBodyCorrectOptionId = GHC.Maybe.Nothing,
                                                                                                                                                 postSendPollRequestBodyDisableNotification = GHC.Maybe.Nothing,
                                                                                                                                                 postSendPollRequestBodyExplanation = GHC.Maybe.Nothing,
                                                                                                                                                 postSendPollRequestBodyExplanationEntities = GHC.Maybe.Nothing,
                                                                                                                                                 postSendPollRequestBodyExplanationParseMode = GHC.Maybe.Nothing,
                                                                                                                                                 postSendPollRequestBodyIsAnonymous = GHC.Maybe.Nothing,
                                                                                                                                                 postSendPollRequestBodyIsClosed = GHC.Maybe.Nothing,
                                                                                                                                                 postSendPollRequestBodyOpenPeriod = GHC.Maybe.Nothing,
                                                                                                                                                 postSendPollRequestBodyOptions = postSendPollRequestBodyOptions,
                                                                                                                                                 postSendPollRequestBodyProtectContent = GHC.Maybe.Nothing,
                                                                                                                                                 postSendPollRequestBodyQuestion = postSendPollRequestBodyQuestion,
                                                                                                                                                 postSendPollRequestBodyReplyMarkup = GHC.Maybe.Nothing,
                                                                                                                                                 postSendPollRequestBodyReplyToMessageId = GHC.Maybe.Nothing,
                                                                                                                                                 postSendPollRequestBodyType = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/sendPoll.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
data PostSendPollRequestBodyChatId'Variants =
   PostSendPollRequestBodyChatId'Int GHC.Types.Int
  | PostSendPollRequestBodyChatId'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSendPollRequestBodyChatId'Variants
    where toJSON (PostSendPollRequestBodyChatId'Int a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSendPollRequestBodyChatId'Text a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSendPollRequestBodyChatId'Variants
    where parseJSON val = case (PostSendPollRequestBodyChatId'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSendPollRequestBodyChatId'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/sendPoll.POST.requestBody.content.application\/json.schema.properties.reply_markup.anyOf@ in the specification.
-- 
-- Additional interface options. A JSON-serialized object for an [inline keyboard](https:\\\/\\\/core.telegram.org\\\/bots\\\#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https:\\\/\\\/core.telegram.org\\\/bots\\\#keyboards), instructions to remove reply keyboard or to force a reply from the user.
data PostSendPollRequestBodyReplyMarkup' = PostSendPollRequestBodyReplyMarkup' {
  -- | force_reply: Shows reply interface to the user, as if they manually selected the bot\'s message and tapped \'Reply\'
  postSendPollRequestBodyReplyMarkup'ForceReply :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | inline_keyboard: Array of button rows, each represented by an Array of [InlineKeyboardButton](https:\/\/core.telegram.org\/bots\/api\/\#inlinekeyboardbutton) objects
  , postSendPollRequestBodyReplyMarkup'InlineKeyboard :: (GHC.Maybe.Maybe ([[InlineKeyboardButton]]))
  -- | input_field_placeholder: *Optional*. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 1
  , postSendPollRequestBodyReplyMarkup'InputFieldPlaceholder :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | keyboard: Array of button rows, each represented by an Array of [KeyboardButton](https:\/\/core.telegram.org\/bots\/api\/\#keyboardbutton) objects
  , postSendPollRequestBodyReplyMarkup'Keyboard :: (GHC.Maybe.Maybe ([[KeyboardButton]]))
  -- | one_time_keyboard: *Optional*. Requests clients to hide the keyboard as soon as it\'s been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.
  , postSendPollRequestBodyReplyMarkup'OneTimeKeyboard :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | remove_keyboard: Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\\_time\\_keyboard* in [ReplyKeyboardMarkup](https:\/\/core.telegram.org\/bots\/api\/\#replykeyboardmarkup))
  , postSendPollRequestBodyReplyMarkup'RemoveKeyboard :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | resize_keyboard: *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app\'s standard keyboard.
  , postSendPollRequestBodyReplyMarkup'ResizeKeyboard :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | selective: *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are \@mentioned in the *text* of the [Message](https:\/\/core.telegram.org\/bots\/api\/\#message) object; 2) if the bot\'s message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.  
  -- 
  -- *Example:* A user requests to change the bot\'s language, bot replies to the request with a keyboard to select the new language. Other users in the group don\'t see the keyboard.
  , postSendPollRequestBodyReplyMarkup'Selective :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSendPollRequestBodyReplyMarkup'
    where toJSON obj = Data.Aeson.Types.Internal.object ("force_reply" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'ForceReply obj : "inline_keyboard" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'InlineKeyboard obj : "input_field_placeholder" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'InputFieldPlaceholder obj : "keyboard" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'Keyboard obj : "one_time_keyboard" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'OneTimeKeyboard obj : "remove_keyboard" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'RemoveKeyboard obj : "resize_keyboard" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'ResizeKeyboard obj : "selective" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'Selective obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("force_reply" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'ForceReply obj) GHC.Base.<> (("inline_keyboard" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'InlineKeyboard obj) GHC.Base.<> (("input_field_placeholder" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'InputFieldPlaceholder obj) GHC.Base.<> (("keyboard" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'Keyboard obj) GHC.Base.<> (("one_time_keyboard" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'OneTimeKeyboard obj) GHC.Base.<> (("remove_keyboard" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'RemoveKeyboard obj) GHC.Base.<> (("resize_keyboard" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'ResizeKeyboard obj) GHC.Base.<> ("selective" Data.Aeson.Types.ToJSON..= postSendPollRequestBodyReplyMarkup'Selective obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostSendPollRequestBodyReplyMarkup'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSendPollRequestBodyReplyMarkup'" (\obj -> (((((((GHC.Base.pure PostSendPollRequestBodyReplyMarkup' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "force_reply")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inline_keyboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "input_field_placeholder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "keyboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "one_time_keyboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "remove_keyboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "resize_keyboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "selective"))
-- | Create a new 'PostSendPollRequestBodyReplyMarkup'' with all required fields.
mkPostSendPollRequestBodyReplyMarkup' :: PostSendPollRequestBodyReplyMarkup'
mkPostSendPollRequestBodyReplyMarkup' = PostSendPollRequestBodyReplyMarkup'{postSendPollRequestBodyReplyMarkup'ForceReply = GHC.Maybe.Nothing,
                                                                            postSendPollRequestBodyReplyMarkup'InlineKeyboard = GHC.Maybe.Nothing,
                                                                            postSendPollRequestBodyReplyMarkup'InputFieldPlaceholder = GHC.Maybe.Nothing,
                                                                            postSendPollRequestBodyReplyMarkup'Keyboard = GHC.Maybe.Nothing,
                                                                            postSendPollRequestBodyReplyMarkup'OneTimeKeyboard = GHC.Maybe.Nothing,
                                                                            postSendPollRequestBodyReplyMarkup'RemoveKeyboard = GHC.Maybe.Nothing,
                                                                            postSendPollRequestBodyReplyMarkup'ResizeKeyboard = GHC.Maybe.Nothing,
                                                                            postSendPollRequestBodyReplyMarkup'Selective = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/sendPoll.POST.requestBody.content.application\/json.schema.properties.type@ in the specification.
-- 
-- Poll type, “quiz” or “regular”, defaults to “regular”
data PostSendPollRequestBodyType' =
   PostSendPollRequestBodyType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostSendPollRequestBodyType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostSendPollRequestBodyType'EnumQuiz -- ^ Represents the JSON value @"quiz"@
  | PostSendPollRequestBodyType'EnumRegular -- ^ Represents the JSON value @"regular"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSendPollRequestBodyType'
    where toJSON (PostSendPollRequestBodyType'Other val) = val
          toJSON (PostSendPollRequestBodyType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostSendPollRequestBodyType'EnumQuiz) = "quiz"
          toJSON (PostSendPollRequestBodyType'EnumRegular) = "regular"
instance Data.Aeson.Types.FromJSON.FromJSON PostSendPollRequestBodyType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "quiz" -> PostSendPollRequestBodyType'EnumQuiz
                                            | val GHC.Classes.== "regular" -> PostSendPollRequestBodyType'EnumRegular
                                            | GHC.Base.otherwise -> PostSendPollRequestBodyType'Other val)
-- | Represents a response of the operation 'postSendPoll'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSendPollResponseError' is used.
data PostSendPollResponse =
   PostSendPollResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostSendPollResponse200 PostSendPollResponseBody200 -- ^ 
  | PostSendPollResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/sendPoll.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSendPollResponseBody200 = PostSendPollResponseBody200 {
  -- | ok
  postSendPollResponseBody200Ok :: GHC.Types.Bool
  -- | result: This object represents a message.
  , postSendPollResponseBody200Result :: Message
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSendPollResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postSendPollResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postSendPollResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postSendPollResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postSendPollResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostSendPollResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSendPollResponseBody200" (\obj -> (GHC.Base.pure PostSendPollResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostSendPollResponseBody200' with all required fields.
mkPostSendPollResponseBody200 :: GHC.Types.Bool -- ^ 'postSendPollResponseBody200Ok'
  -> Message -- ^ 'postSendPollResponseBody200Result'
  -> PostSendPollResponseBody200
mkPostSendPollResponseBody200 postSendPollResponseBody200Ok postSendPollResponseBody200Result = PostSendPollResponseBody200{postSendPollResponseBody200Ok = postSendPollResponseBody200Ok,
                                                                                                                            postSendPollResponseBody200Result = postSendPollResponseBody200Result}
