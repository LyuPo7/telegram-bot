-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postSetChatPermissions
module StripeAPI.Operations.PostSetChatPermissions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /setChatPermissions
-- 
-- Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\\_restrict\\_members* administrator rights. Returns *True* on success.
postSetChatPermissions :: forall m . StripeAPI.Common.MonadHTTP m => PostSetChatPermissionsRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostSetChatPermissionsResponse) -- ^ Monadic computation which returns the result of the operation
postSetChatPermissions body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostSetChatPermissionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostSetChatPermissionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     PostSetChatPermissionsResponseBody200)
                                                                                                                                                                               | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostSetChatPermissionsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                       Error)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setChatPermissions") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/setChatPermissions.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSetChatPermissionsRequestBody = PostSetChatPermissionsRequestBody {
  -- | chat_id: Unique identifier for the target chat or username of the target supergroup (in the format \`\@supergroupusername\`)
  postSetChatPermissionsRequestBodyChatId :: PostSetChatPermissionsRequestBodyChatId'Variants
  -- | permissions: Describes actions that a non-administrator user is allowed to take in a chat.
  , postSetChatPermissionsRequestBodyPermissions :: ChatPermissions
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSetChatPermissionsRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("chat_id" Data.Aeson.Types.ToJSON..= postSetChatPermissionsRequestBodyChatId obj : "permissions" Data.Aeson.Types.ToJSON..= postSetChatPermissionsRequestBodyPermissions obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("chat_id" Data.Aeson.Types.ToJSON..= postSetChatPermissionsRequestBodyChatId obj) GHC.Base.<> ("permissions" Data.Aeson.Types.ToJSON..= postSetChatPermissionsRequestBodyPermissions obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostSetChatPermissionsRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSetChatPermissionsRequestBody" (\obj -> (GHC.Base.pure PostSetChatPermissionsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "permissions"))
-- | Create a new 'PostSetChatPermissionsRequestBody' with all required fields.
mkPostSetChatPermissionsRequestBody :: PostSetChatPermissionsRequestBodyChatId'Variants -- ^ 'postSetChatPermissionsRequestBodyChatId'
  -> ChatPermissions -- ^ 'postSetChatPermissionsRequestBodyPermissions'
  -> PostSetChatPermissionsRequestBody
mkPostSetChatPermissionsRequestBody postSetChatPermissionsRequestBodyChatId postSetChatPermissionsRequestBodyPermissions = PostSetChatPermissionsRequestBody{postSetChatPermissionsRequestBodyChatId = postSetChatPermissionsRequestBodyChatId,
                                                                                                                                                             postSetChatPermissionsRequestBodyPermissions = postSetChatPermissionsRequestBodyPermissions}
-- | Defines the oneOf schema located at @paths.\/setChatPermissions.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target supergroup (in the format \`\@supergroupusername\`)
data PostSetChatPermissionsRequestBodyChatId'Variants =
   PostSetChatPermissionsRequestBodyChatId'Int GHC.Types.Int
  | PostSetChatPermissionsRequestBodyChatId'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSetChatPermissionsRequestBodyChatId'Variants
    where toJSON (PostSetChatPermissionsRequestBodyChatId'Int a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSetChatPermissionsRequestBodyChatId'Text a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSetChatPermissionsRequestBodyChatId'Variants
    where parseJSON val = case (PostSetChatPermissionsRequestBodyChatId'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSetChatPermissionsRequestBodyChatId'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postSetChatPermissions'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSetChatPermissionsResponseError' is used.
data PostSetChatPermissionsResponse =
   PostSetChatPermissionsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostSetChatPermissionsResponse200 PostSetChatPermissionsResponseBody200 -- ^ 
  | PostSetChatPermissionsResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/setChatPermissions.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSetChatPermissionsResponseBody200 = PostSetChatPermissionsResponseBody200 {
  -- | ok
  postSetChatPermissionsResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postSetChatPermissionsResponseBody200Result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSetChatPermissionsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postSetChatPermissionsResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postSetChatPermissionsResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postSetChatPermissionsResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postSetChatPermissionsResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostSetChatPermissionsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSetChatPermissionsResponseBody200" (\obj -> (GHC.Base.pure PostSetChatPermissionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostSetChatPermissionsResponseBody200' with all required fields.
mkPostSetChatPermissionsResponseBody200 :: GHC.Types.Bool -- ^ 'postSetChatPermissionsResponseBody200Ok'
  -> GHC.Types.Bool -- ^ 'postSetChatPermissionsResponseBody200Result'
  -> PostSetChatPermissionsResponseBody200
mkPostSetChatPermissionsResponseBody200 postSetChatPermissionsResponseBody200Ok postSetChatPermissionsResponseBody200Result = PostSetChatPermissionsResponseBody200{postSetChatPermissionsResponseBody200Ok = postSetChatPermissionsResponseBody200Ok,
                                                                                                                                                                    postSetChatPermissionsResponseBody200Result = postSetChatPermissionsResponseBody200Result}
