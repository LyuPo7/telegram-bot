-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postEditMessageReplyMarkup
module StripeAPI.Operations.PostEditMessageReplyMarkup where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /editMessageReplyMarkup
-- 
-- Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https:\/\/core.telegram.org\/bots\/api\/\#message) is returned, otherwise *True* is returned.
postEditMessageReplyMarkup :: forall m . StripeAPI.Common.MonadHTTP m => PostEditMessageReplyMarkupRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostEditMessageReplyMarkupResponse) -- ^ Monadic computation which returns the result of the operation
postEditMessageReplyMarkup body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostEditMessageReplyMarkupResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostEditMessageReplyMarkupResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 PostEditMessageReplyMarkupResponseBody200)
                                                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostEditMessageReplyMarkupResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                   Error)
                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/editMessageReplyMarkup") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/editMessageReplyMarkup.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostEditMessageReplyMarkupRequestBody = PostEditMessageReplyMarkupRequestBody {
  -- | chat_id: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
  postEditMessageReplyMarkupRequestBodyChatId :: (GHC.Maybe.Maybe PostEditMessageReplyMarkupRequestBodyChatId'Variants)
  -- | inline_message_id: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message
  , postEditMessageReplyMarkupRequestBodyInlineMessageId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | message_id: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit
  , postEditMessageReplyMarkupRequestBodyMessageId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | reply_markup: This object represents an [inline keyboard](https:\/\/core.telegram.org\/bots\#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
  , postEditMessageReplyMarkupRequestBodyReplyMarkup :: (GHC.Maybe.Maybe InlineKeyboardMarkup)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostEditMessageReplyMarkupRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("chat_id" Data.Aeson.Types.ToJSON..= postEditMessageReplyMarkupRequestBodyChatId obj : "inline_message_id" Data.Aeson.Types.ToJSON..= postEditMessageReplyMarkupRequestBodyInlineMessageId obj : "message_id" Data.Aeson.Types.ToJSON..= postEditMessageReplyMarkupRequestBodyMessageId obj : "reply_markup" Data.Aeson.Types.ToJSON..= postEditMessageReplyMarkupRequestBodyReplyMarkup obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("chat_id" Data.Aeson.Types.ToJSON..= postEditMessageReplyMarkupRequestBodyChatId obj) GHC.Base.<> (("inline_message_id" Data.Aeson.Types.ToJSON..= postEditMessageReplyMarkupRequestBodyInlineMessageId obj) GHC.Base.<> (("message_id" Data.Aeson.Types.ToJSON..= postEditMessageReplyMarkupRequestBodyMessageId obj) GHC.Base.<> ("reply_markup" Data.Aeson.Types.ToJSON..= postEditMessageReplyMarkupRequestBodyReplyMarkup obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PostEditMessageReplyMarkupRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostEditMessageReplyMarkupRequestBody" (\obj -> (((GHC.Base.pure PostEditMessageReplyMarkupRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inline_message_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reply_markup"))
-- | Create a new 'PostEditMessageReplyMarkupRequestBody' with all required fields.
mkPostEditMessageReplyMarkupRequestBody :: PostEditMessageReplyMarkupRequestBody
mkPostEditMessageReplyMarkupRequestBody = PostEditMessageReplyMarkupRequestBody{postEditMessageReplyMarkupRequestBodyChatId = GHC.Maybe.Nothing,
                                                                                postEditMessageReplyMarkupRequestBodyInlineMessageId = GHC.Maybe.Nothing,
                                                                                postEditMessageReplyMarkupRequestBodyMessageId = GHC.Maybe.Nothing,
                                                                                postEditMessageReplyMarkupRequestBodyReplyMarkup = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/editMessageReplyMarkup.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
data PostEditMessageReplyMarkupRequestBodyChatId'Variants =
   PostEditMessageReplyMarkupRequestBodyChatId'Int GHC.Types.Int
  | PostEditMessageReplyMarkupRequestBodyChatId'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostEditMessageReplyMarkupRequestBodyChatId'Variants
    where toJSON (PostEditMessageReplyMarkupRequestBodyChatId'Int a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostEditMessageReplyMarkupRequestBodyChatId'Text a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostEditMessageReplyMarkupRequestBodyChatId'Variants
    where parseJSON val = case (PostEditMessageReplyMarkupRequestBodyChatId'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostEditMessageReplyMarkupRequestBodyChatId'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postEditMessageReplyMarkup'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostEditMessageReplyMarkupResponseError' is used.
data PostEditMessageReplyMarkupResponse =
   PostEditMessageReplyMarkupResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostEditMessageReplyMarkupResponse200 PostEditMessageReplyMarkupResponseBody200 -- ^ 
  | PostEditMessageReplyMarkupResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/editMessageReplyMarkup.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostEditMessageReplyMarkupResponseBody200 = PostEditMessageReplyMarkupResponseBody200 {
  -- | ok
  postEditMessageReplyMarkupResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postEditMessageReplyMarkupResponseBody200Result :: PostEditMessageReplyMarkupResponseBody200Result'Variants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostEditMessageReplyMarkupResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postEditMessageReplyMarkupResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postEditMessageReplyMarkupResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postEditMessageReplyMarkupResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postEditMessageReplyMarkupResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostEditMessageReplyMarkupResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostEditMessageReplyMarkupResponseBody200" (\obj -> (GHC.Base.pure PostEditMessageReplyMarkupResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostEditMessageReplyMarkupResponseBody200' with all required fields.
mkPostEditMessageReplyMarkupResponseBody200 :: GHC.Types.Bool -- ^ 'postEditMessageReplyMarkupResponseBody200Ok'
  -> PostEditMessageReplyMarkupResponseBody200Result'Variants -- ^ 'postEditMessageReplyMarkupResponseBody200Result'
  -> PostEditMessageReplyMarkupResponseBody200
mkPostEditMessageReplyMarkupResponseBody200 postEditMessageReplyMarkupResponseBody200Ok postEditMessageReplyMarkupResponseBody200Result = PostEditMessageReplyMarkupResponseBody200{postEditMessageReplyMarkupResponseBody200Ok = postEditMessageReplyMarkupResponseBody200Ok,
                                                                                                                                                                                    postEditMessageReplyMarkupResponseBody200Result = postEditMessageReplyMarkupResponseBody200Result}
-- | Defines the oneOf schema located at @paths.\/editMessageReplyMarkup.POST.responses.200.content.application\/json.schema.properties.result.anyOf@ in the specification.
-- 
-- 
data PostEditMessageReplyMarkupResponseBody200Result'Variants =
   PostEditMessageReplyMarkupResponseBody200Result'Message Message
  | PostEditMessageReplyMarkupResponseBody200Result'Bool GHC.Types.Bool
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostEditMessageReplyMarkupResponseBody200Result'Variants
    where toJSON (PostEditMessageReplyMarkupResponseBody200Result'Message a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostEditMessageReplyMarkupResponseBody200Result'Bool a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostEditMessageReplyMarkupResponseBody200Result'Variants
    where parseJSON val = case (PostEditMessageReplyMarkupResponseBody200Result'Message Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostEditMessageReplyMarkupResponseBody200Result'Bool Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
